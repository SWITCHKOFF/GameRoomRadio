/*Отслеживание изменений в глобальной переменной globalSheets*/
function watchGlobalSheets(sheetName, callback)
{
    let value;
    Object.defineProperty(window, sheetName,
        {
        get()
        {
            return value;
        },
        set(newValue) {
            if (value === undefined && newValue !== null)
            {
                callback(newValue);
            }
            value = newValue;
        },
        configurable: true,
        enumerable: true
    });
}

function onGlobalSheetsChanged(value)
{
    const lastFourSoundsArray = extractForLastSoundsData(value);
    showCardsFromLastSoundsBlock(lastFourSoundsArray);

    const lastTenPodcastsArray = extractForLastPodcastsData(value);
    showCardsFromPodcastsBlock(lastTenPodcastsArray);
}

watchGlobalSheets('globalSheets', onGlobalSheetsChanged);


/*Основные функции и классы для работы с карточками*/
function extractForLastSoundsData(globalSheets)
{
    let extractedDataArray = [];
    for(let i = globalSheets[0].rows.length - 4, j = 0; i < globalSheets[0].rows.length; i++, j++)
    {
        extractedDataArray[j] = 
        {
            id: parseInt(globalSheets[0].rows[i][0]),
            image: globalSheets[0].rows[i][1],
            name: globalSheets[0].rows[i][2],
            type: globalSheets[0].rows[i][3],
            date: globalSheets[0].rows[i][4],
            time: globalSheets[0].rows[i][5],
            sound: globalSheets[0].rows[i][6]
        }
    }
    return extractedDataArray;
}

function extractForLastPodcastsData(globalSheets)
{
    let extractedDataArray = [];
    for(let i = globalSheets[1].rows.length - 10, j = 0; i < globalSheets[1].rows.length; i++, j++)
    {
        extractedDataArray[j] = 
        {
            id: parseInt(globalSheets[1].rows[i][0]),
            image: globalSheets[1].rows[i][1],
            name: globalSheets[1].rows[i][2],
            type: globalSheets[1].rows[i][3],
            date: globalSheets[1].rows[i][4],
            time: globalSheets[1].rows[i][5],
            sound: globalSheets[1].rows[i][6]
        }
    }
    return extractedDataArray;
}

function extractForLastNewsData(globalSheets)
{
    let extractedDataArray = [];
    for(let i = globalSheets[2].rows.length - 4, j = 0; i < globalSheets[2].rows.length; i++, j++)
    {
        extractedDataArray[j] = 
        {
            id: parseInt(globalSheets[2].rows[i][0]),
            image: globalSheets[2].rows[i][1],
            name: globalSheets[2].rows[i][2],
            type: globalSheets[2].rows[i][3],
            date: globalSheets[2].rows[i][4],
            time: globalSheets[2].rows[i][5],
            sound: globalSheets[2].rows[i][6]
        }
    }
    return extractedDataArray;
}

function showCardsFromLastSoundsBlock(dataBuffer)
{
    const parentElement = document.getElementById('sounds-container');
    const childElementsArray = parentElement.querySelectorAll('*');
    childElementsArray.forEach(child => {
        switch(child.className)
        {
            case 'last-sounds__loader-container':
            {
                child.remove();
                break;
            }
            case 'sound-container':
            {
                const soundsContainer = document.getElementById('sounds-container');
                for(let i = dataBuffer.length - 1; i >= 0; i--)
                {
                    const clonedCard = child.cloneNode(true);
                    child.remove();
                    clonedCard.style.display = 'grid';
                    const soundInfo = clonedCard.querySelector('div.sound-info');
                    const soundName = soundInfo.querySelector('span.sound-name');
                    soundName.textContent = dataBuffer[i].name;
                    
                    const soundType = soundInfo.querySelector('span.sound-type');
                    soundType.textContent = dataBuffer[i].type;

                    const soundInfoAdvanced = clonedCard.querySelector('div.sound-info-advanced');
                    const soundDate = soundInfoAdvanced.querySelector('span.sound-date');
                    soundDate.textContent = `${dataBuffer[i].date} ${dataBuffer[i].time}`;
                    soundsContainer.appendChild(clonedCard);
                };
                break;
            }
            case 'sounds-showAll':
            {
                child.style.display = 'block';
                break;
            }
        }
    });
    return;
}

function showCardsFromPodcastsBlock(dataBuffer)
{
    const parentElement = document.getElementById('podcasts-container');
    const childElementsArray = parentElement.querySelectorAll('*');
    childElementsArray.forEach(child => {
        switch(child.className)
        {
            case 'podcasts__loader-container': 
            {
                child.remove();
                break;
            }
            case 'podcast-card':
            {
                const podcastsContainer = document.getElementById('podcasts-container');
                for(let i = dataBuffer.length - 1; i >= 0; i--)
                {
                    const clonedCard = child.cloneNode(true);
                    child.remove();
                    clonedCard.style.display = 'grid';
                    const podcastInfo = clonedCard.querySelector('div.podcast-card__info');
                    const podcastTitle = podcastInfo.querySelector('h2');
                    podcastTitle.textContent = dataBuffer[i].name;
                    
                    const podcastDesc = podcastInfo.querySelector('p');
                    podcastDesc.textContent = dataBuffer[i].type;

                    const podcastInfoAdvanced = clonedCard.querySelector('div.podcast-card__info-advanced');
                    const podcastDate = podcastInfoAdvanced.querySelector('span.podcast-card__date');
                    podcastDate.innerHTML = `${dataBuffer[i].date}<br>${dataBuffer[i].time}`;
                    podcastsContainer.appendChild(clonedCard);
                }
               break;
            }
        }
    })
    
    const podcastsButtonShowAll = document.querySelector('div.podcasts-button__showAll-container');
    podcastsButtonShowAll.style.display = 'block';
    return;
}