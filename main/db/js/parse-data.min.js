import { html, Component, render, useState, useEffect } from './htm-preact.min.js';
import './shim.min.js';
import './xlsx.min.js';

function sheet2arr(sheet) {
    const result = [];
    let row;
    let rowNum;
    let colNum;
    const range = XLSX.utils.decode_range(sheet['!ref']);
    for(rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {
        row = [];
        for(colNum = range.s.c; colNum <= range.e.c; colNum++){
            const nextCell = sheet[
                XLSX.utils.encode_cell({ r: rowNum, c: colNum })
            ];
            if(typeof nextCell === 'undefined') {
                row.push(null);
            } else {
                row.push(nextCell.w);
            }
        }
        result.push(row);
    }
    return result;
}

function App() {
    const [sheets, setSheets] = useState(null);
    const [currentSheet, setCurrentSheet] = useState(null);

    useEffect(() => {
        const savedSheets = localStorage.getItem('sheets');
        if (savedSheets) {
            const parsedSheets = JSON.parse(savedSheets);
            setSheets(parsedSheets);
            setCurrentSheet(parsedSheets[0]);
            window.globalSheets = parsedSheets;
        } else {
            loadFile();
        }
    }, []);

    function loadFile() {
        const req = new XMLHttpRequest();
        req.open('GET', './main/db/excel/database.xlsx', true);
        req.responseType = 'arraybuffer';
        req.onload = function(e) {
            const workBook = XLSX.read(req.response, { type:'array' });
            const allSheets = Object.keys(workBook.Sheets).map((sheet) => {
                return {
                    sheet: sheet,
                    rows: sheet2arr(workBook.Sheets[sheet])
                };
            });
            setSheets(allSheets);
            setCurrentSheet(allSheets[0]);
            window.globalSheets = allSheets;
        }
        req.send();
    }
}

render(html`<${App}/>`, document.body);
